package com.company.bookstore.repositories;

import com.company.bookstore.models.Author;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
public class AuthorRepositoryTest {
    @Autowired
    AuthorRepository repo;
    Author a;
    List<Author> authorList = new ArrayList<>();
    @BeforeEach
    void setUp() {
        repo.deleteAll(); // reset repo
        authorList = new ArrayList<>(); //reset list
        a = new Author(); // reset default author
        a.setFirstName("John");
        a.setLastName("Doe");
        a.setStreet("47 Garden St");
        a.setCity("Boston");
        a.setState("MA");
        a.setPostalCode("02134");
        a.setPhone("123-345-2344");
        a.setEmail("JDoe@gmail.com");
        authorList.add(a);
        a = repo.save(a); // Author object - guarantees you get back ID since it is autogenerated
    }

    // Create
    @Test
    void createAuthorTest(){
        Author author = new Author();
        author.setId(2);
        author.setFirstName("Mary");
        author.setLastName("Doe");
        author.setPostalCode("02134");
        author.setState("TX");
        author.setCity("Austin");
        author.setEmail("mary@gmail.com");
        author.setStreet("47 Garden St");
        author.setPhone("123-444-3124");
        repo.save(author);
        assertEquals(2, repo.count());
    }

    // Read by Id
    @Test
    void readByIdTest() {
        assertEquals(a, repo.findById(a.getId()).get());
    }

    // Read All
    @Test
    void readAllAuthorsTest() {
        Author a2 = new Author();
        Author a3 = new Author();
        Author a4 = new Author();
        authorList.add(a2);
        authorList.add(a3);
        authorList.add(a4);
        assertEquals(4, authorList.size());
    }

    // Update
    @Test
    void updateAuthorTest() {
        a.setState("CA");
        a.setCity("San Diego");
        a.setPhone("123-999-0101");
        assertEquals("CA", a.getState());
        assertEquals("San Diego", a.getCity());
        assertEquals("123-999-0101", a.getPhone());
    }

    // Delete
    @Test
    void deleteAuthorTest() {
        repo.deleteById(a.getId());
        assertFalse(repo.existsById(a.getId()));
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        AuthorRepositoryTest that = (AuthorRepositoryTest) o;
        return Objects.equals(repo, that.repo) && Objects.equals(a, that.a) && Objects.equals(authorList, that.authorList);
    }

    @Override
    public int hashCode() {
        return Objects.hash(repo, a, authorList);
    }

    @Override
    public String toString() {
        return "AuthorRepositoryTest{" +
                "repo=" + repo +
                ", a=" + a +
                ", authorList=" + authorList +
                '}';
    }
}
